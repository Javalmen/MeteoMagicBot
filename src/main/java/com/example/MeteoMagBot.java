package com.example;

import org.json.JSONArray;
import org.json.JSONObject;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.io.IOException;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;


public class MeteoMagBot extends TelegramLongPollingBot {

    private static final Logger LOGGER = Logger.getLogger(MeteoMagBot.class.getName());

    @Override
    public String getBotUsername() {
        return "MeteoMag";
    }

    @Override
    public String getBotToken() {
        return System.getenv("TELEGRAM_BOT_TOKEN");
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            if (messageText.equals("/start")) {
                sendResponse(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç MeteoMag. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É.");
            } else if (messageText.equals("/help")) {
                sendResponse(chatId, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.");
            } else {
                handleWeatherRequest(chatId, messageText);
            }
        }
    }

    private void sendResponse(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            LOGGER.log(Level.SEVERE, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
        }
    }

    private void handleWeatherRequest(long chatId, String location) {
        try {
            OkHttpClient client = new OkHttpClient();
            String geoUrl = "https://geocoding-api.open-meteo.com/v1/search?name=" + location + "&count=1&language=ru&format=json";
            Request geoRequest = new Request.Builder().url(geoUrl).build();
            Response geoResponse = client.newCall(geoRequest).execute();
            String geoResponseBody = geoResponse.body().string();

            JSONObject geoJson = new JSONObject(geoResponseBody);
            JSONArray results = geoJson.getJSONArray("results");

            if (results.length() > 0) {
                JSONObject result = results.getJSONObject(0);
                String featureCode = result.getString("feature_code");

                // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–æ–º
                if (!isValidLocation(location)) {
                    sendResponse(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞.");
                    return;
                }

                double latitude = result.getDouble("latitude");
                double longitude = result.getDouble("longitude");

                String weatherUrl = "https://api.open-meteo.com/v1/forecast?latitude=" + latitude + "&longitude=" + longitude + "&current_weather=true&hourly=temperature_2m";
                Request weatherRequest = new Request.Builder().url(weatherUrl).build();
                Response weatherResponse = client.newCall(weatherRequest).execute();
                String weatherResponseBody = weatherResponse.body().string();

                JSONObject weatherJson = new JSONObject(weatherResponseBody);
                JSONObject currentWeather = weatherJson.getJSONObject("current_weather");
                double temperature = currentWeather.getDouble("temperature");
                int weatherCode = currentWeather.getInt("weathercode");

                String weatherDescription = translateWeatherCode(weatherCode);
                String recommendation = getClothingRecommendation(temperature, weatherDescription);

                sendResponse(chatId, String.format("–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ \"%s\" —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç %.1f¬∞C. \n–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: %s. %s",
                        location, temperature, weatherDescription, recommendation));
            } else {
                sendResponse(chatId, "–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.");
            }
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã", e);
            sendResponse(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private JSONObject getWeatherData(String location) throws IOException {
        OkHttpClient client = new OkHttpClient(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OkHttpClient

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
        String geoUrl = "https://geocoding-api.open-meteo.com/v1/search?name=" + location + "&count=1&language=ru&format=json";
        Request geoRequest = new Request.Builder().url(geoUrl).build();
        Response geoResponse = client.newCall(geoRequest).execute();
        String geoResponseBody = geoResponse.body().string();

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        LOGGER.info("Geo API Response: " + geoResponseBody);

        JSONObject geoJson = new JSONObject(geoResponseBody);
        JSONArray results = geoJson.getJSONArray("results");

        if (results.length() > 0) {
            JSONObject result = results.getJSONObject(0);
            double latitude = result.getDouble("latitude");
            double longitude = result.getDouble("longitude");

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ
            String weatherUrl = "https://api.open-meteo.com/v1/forecast?latitude=" + latitude + "&longitude=" + longitude + "&current_weather=true&hourly=temperature_2m";
            Request weatherRequest = new Request.Builder().url(weatherUrl).build();
            Response weatherResponse = client.newCall(weatherRequest).execute();
            String weatherResponseBody = weatherResponse.body().string();

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            LOGGER.info("Weather API Response: " + weatherResponseBody);

            JSONObject weatherJson = new JSONObject(weatherResponseBody);
            return weatherJson.getJSONObject("current_weather");
        }
        return null;
    }

    private boolean isValidLocation(String location) throws IOException {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OkHttpClient
        OkHttpClient client = new OkHttpClient();

        // –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –æ–±—ä–µ–∫—Ç–µ
        String geoUrl = "https://geocoding-api.open-meteo.com/v1/search?name=" + location + "&count=1&language=ru&format=json";
        Request geoRequest = new Request.Builder().url(geoUrl).build();
        Response geoResponse = client.newCall(geoRequest).execute();
        String geoResponseBody = geoResponse.body().string();

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Geo API –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        LOGGER.info("Geo API Response: " + geoResponseBody);

        JSONObject geoJson = new JSONObject(geoResponseBody);
        JSONArray results = geoJson.getJSONArray("results");

        // –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π feature_code –¥–ª—è –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
        Set<String> validFeatureCodes = Set.of(
                "PPL", "PPLA", "PPLA2", "PPLA3", "PPLA4", "PPLA5", "PPLC",
                "PPLCH", "PPLF", "PPLG", "PPLH", "PPLL", "PPLQ", "PPLR",
                "PPLS", "PPLW", "PPLX", "STLMT"
        );

        if (results.length() > 0) {
            JSONObject result = results.getJSONObject(0);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è feature_code
            if (result.has("feature_code")) {
                String featureCode = result.getString("feature_code");
                // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ feature_code —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
                return validFeatureCodes.contains(featureCode);
            } else {
                LOGGER.warning("Feature code not found in the response.");
            }
        }
        return false;
    }


    private String translateWeatherCode(int code) {
        switch (code) {
            case 0:
                return "—è—Å–Ω–æ–µ –Ω–µ–±–æ ‚òÄÔ∏è";
            case 1:
                return "–≤ –æ—Å–Ω–æ–≤–Ω–æ–º —è—Å–Ω–æ üå§Ô∏è";
            case 2:
                return "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å ‚õÖ";
            case 3:
                return "–ø–∞—Å–º—É—Ä–Ω–æ ‚òÅÔ∏è";
            case 45:
                return "—Ç—É–º–∞–Ω üå´Ô∏è";
            case 48:
                return "–æ—Å–∞–∂–¥–∞—é—â–∏–π –∏–Ω–µ–π ‚ùÑÔ∏è";
            case 51:
                return "–º–æ—Ä–æ—Å—å, –ª—ë–≥–∫–∞—è üå¶Ô∏è";
            case 53:
                return "–º–æ—Ä–æ—Å—å, —É–º–µ—Ä–µ–Ω–Ω–∞—è üåßÔ∏è";
            case 55:
                return "–º–æ—Ä–æ—Å—å, –≥—É—Å—Ç–∞—è üåßÔ∏èüåßÔ∏è";
            case 56:
                return "–ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å, –ª—ë–≥–∫–∞—è üå®Ô∏è‚ùÑÔ∏èÔ∏è";
            case 57:
                return "–ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å, –≥—É—Å—Ç–∞—è ‚ùÑÔ∏è";
            case 61:
                return "–¥–æ–∂–¥—å, —Å–ª–∞–±—ã–π üåßÔ∏è";
            case 63:
                return "–¥–æ–∂–¥—å, —É–º–µ—Ä–µ–Ω–Ω—ã–π üåßÔ∏èüåßÔ∏è";
            case 65:
                return "–¥–æ–∂–¥—å, —Å–∏–ª—å–Ω—ã–π üåßÔ∏èüåßÔ∏èüåßÔ∏è";
            case 66:
                return "–ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å, –ª—ë–≥–∫–∏–π üå®Ô∏è‚ùÑÔ∏è";
            case 67:
                return "–ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å, —Å–∏–ª—å–Ω—ã–π üå®Ô∏èüå®Ô∏è‚ùÑÔ∏è";
            case 71:
                return "—Å–Ω–µ–≥–æ–ø–∞–¥, —Å–ª–∞–±—ã–π ‚ùÑÔ∏è";
            case 73:
                return "—Å–Ω–µ–≥–æ–ø–∞–¥, —É–º–µ—Ä–µ–Ω–Ω—ã–π ‚ùÑÔ∏è‚ùÑÔ∏è";
            case 75:
                return "—Å–Ω–µ–≥–æ–ø–∞–¥, —Å–∏–ª—å–Ω—ã–π ‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è";
            case 77:
                return "—Å–Ω–µ–∂–Ω—ã–µ –∑–µ—Ä–Ω–∞ ‚ùÑÔ∏è";
            case 80:
                return "–ª–∏–≤–Ω–∏, —Å–ª–∞–±—ã–µ üåßÔ∏è";
            case 81:
                return "–ª–∏–≤–Ω–∏, —É–º–µ—Ä–µ–Ω–Ω—ã–µ üåßÔ∏èÔ∏èüåßÔ∏è";
            case 82:
                return "–ª–∏–≤–Ω–∏, —Å–∏–ª—å–Ω—ã–µ üåßÔ∏èüåßÔ∏èüåßÔ∏è";
            case 85:
                return "—Å–Ω–µ–≥–æ–ø–∞–¥—ã, —Å–ª–∞–±—ã–µ ‚ùÑÔ∏è";
            case 86:
                return "—Å–Ω–µ–≥–æ–ø–∞–¥—ã, —Å–∏–ª—å–Ω—ã–µ ‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è";
            case 95:
                return "–≥—Ä–æ–∑–∞, —Å–ª–∞–±–∞—è –∏–ª–∏ —É–º–µ—Ä–µ–Ω–Ω–∞—è ‚õàÔ∏è";
            case 96:
                return "–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º, —Å–ª–∞–±–∞—è ‚õàÔ∏è‚ö°";
            case 99:
                return "–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º, —Å–∏–ª—å–Ω–∞—è ‚õàÔ∏è‚ö°‚ö°";
            default:
                return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è ‚ùì";
        }
    }

    private String getClothingRecommendation(double temperature, String weatherDescription) {
        StringBuilder recommendation = new StringBuilder();

        if (temperature >= 25) {
            recommendation.append("\n–ñ–∞—Ä–∫–æ! –ù–∞–¥–µ–Ω—å—Ç–µ –ª–µ–≥–∫—É—é –æ–¥–µ–∂–¥—É: —à–æ—Ä—Ç—ã, —Ñ—É—Ç–±–æ–ª–∫—É –∏–ª–∏ –ø–ª–∞—Ç—å–µ.");
            if (weatherDescription.toLowerCase().contains("–¥–æ–∂–¥—å") || weatherDescription.toLowerCase().contains("–ª–∏–≤–Ω–∏") || weatherDescription.toLowerCase().contains("–≥—Ä–æ–∑–∞")) {
                recommendation.append(" \n–ó–æ–Ω—Ç –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç.‚òî");
            }
        } else if (temperature >= 15) {
            recommendation.append("\n–ù–∞ —É–ª–∏—Ü–µ —Ç–µ–ø–ª–æ! –ü–æ–¥–æ–π–¥—É—Ç –¥–∂–∏–Ω—Å—ã, —Ñ—É—Ç–±–æ–ª–∫–∞, –ª–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞.");
            if (weatherDescription.toLowerCase().contains("–¥–æ–∂–¥—å") || weatherDescription.toLowerCase().contains("–ª–∏–≤–Ω–∏") || weatherDescription.toLowerCase().contains("–≥—Ä–æ–∑–∞")) {
                recommendation.append(" \n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å –¥–æ–∂–¥–µ–≤–∏–∫ –∏–ª–∏ –∑–æ–Ω—Ç!‚òî");
            }
        } else if (temperature >= 5) {
            recommendation.append("\n–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ. –ù–∞–¥–µ–Ω—å—Ç–µ —Å–≤–∏—Ç–µ—Ä, –∫—É—Ä—Ç–∫—É, –¥–∂–∏–Ω—Å—ã.");
            if (weatherDescription.toLowerCase().contains("–¥–æ–∂–¥—å") || weatherDescription.toLowerCase().contains("–ª–∏–≤–Ω–∏") || weatherDescription.toLowerCase().contains("–≥—Ä–æ–∑–∞")) {
                recommendation.append(" \n–°–∞–º–æ–µ –≤—Ä–µ–º—è –≤–∑—è—Ç—å –∑–æ–Ω—Ç!‚òî");
            }
        } else {
            recommendation.append("\n–•–æ–ª–æ–¥–Ω–æ. –ù–∞–¥–µ–Ω—å—Ç–µ —Ç–µ–ø–ª—É—é –∫—É—Ä—Ç–∫—É, —à–∞–ø–∫—É, —à–∞—Ä—Ñ –∏ –ø–µ—Ä—á–∞—Ç–∫–∏.");
            if (weatherDescription.toLowerCase().contains("–¥–æ–∂–¥—å") || weatherDescription.toLowerCase().contains("–ª–∏–≤–Ω–∏") || weatherDescription.toLowerCase().contains("–≥—Ä–æ–∑–∞")) {
                recommendation.append(" \n–û–¥–µ–Ω—å—Ç–µ—Å—å –ø–æ—Ç–µ–ø–ª–µ–µ, –≤–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç!‚òî");
            }
        }

        if (weatherDescription.toLowerCase().contains("—Å–Ω–µ–≥")) {
            recommendation.append(" \n–û—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö! –ù–µ –ø—Ä–∏–±–µ–≥–∞–π—Ç–µ –∫ —Ä–µ–∑–∫–æ–º—É —Ç–æ—Ä–º–æ–∂–µ–Ω–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞–Ω–æ—Å–∞.");
        } else if (weatherDescription.toLowerCase().contains("—Ç—É–º–∞–Ω")) {
            recommendation.append(" \n–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö –∏–∑-–∑–∞ –ø–ª–æ—Ö–æ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏!");
        }

        return recommendation.toString();
    }


    public static void main(String[] args) {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API Telegram Bots
            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);

            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞
            botsApi.registerBot(new MeteoMagBot());
            System.out.println("MeteoMagBot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
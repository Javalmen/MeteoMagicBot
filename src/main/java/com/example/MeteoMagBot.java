package com.example;

import org.json.JSONArray;
import org.json.JSONObject;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.io.IOException;
import java.net.URI;
import java.net.URLEncoder;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;

public class MeteoMagBot extends TelegramLongPollingBot {

    private static final String BOT_TOKEN = System.getenv("TELEGRAM_BOT_TOKEN");
    private static final String WEATHER_API_KEY = System.getenv("WEATHER_API_KEY");
    private static final ZoneId USER_TIMEZONE = ZoneId.of("Europe/Moscow");

    private final Map<String, String> weatherDescriptions = new HashMap<>();

    public MeteoMagBot() {
        weatherDescriptions.put("Thunderstorm", "–ì—Ä–æ–∑–∞");
        weatherDescriptions.put("Drizzle", "–ú–æ—Ä–æ—Å—å");
        weatherDescriptions.put("Rain", "–î–æ–∂–¥—å");
        weatherDescriptions.put("Snow", "–°–Ω–µ–≥");
        weatherDescriptions.put("Clear", "–Ø—Å–Ω–æ");
        weatherDescriptions.put("Clouds", "–û–±–ª–∞—á–Ω–æ");
    }

    @Override
    public String getBotToken() {
        return BOT_TOKEN;
    }

    @Override
    public String getBotUsername() {
        return "MeteoMag"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            if (messageText.equals("/start")) {
                sendStartMessage(chatId);
            } else {
                String location = messageText.startsWith("/weather ") ? messageText.substring(9) : messageText;
                try {
                    String weatherInfo = getWeatherInfo(location);
                    if (weatherInfo != null) {
                        sendWeatherMessage(chatId, weatherInfo);
                    } else {
                        sendWeatherMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.");
                    }
                } catch (IOException | InterruptedException e) {
                    sendWeatherMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                    e.printStackTrace();
                }
            }
        }
    }

    private boolean locationExists(String location) throws IOException, InterruptedException {
        String encodedLocation = URLEncoder.encode(location, StandardCharsets.UTF_8);
        String openWeatherMapUrl = String.format("http://api.openweathermap.org/data/2.5/weather?q=%s&appid=%s", encodedLocation, WEATHER_API_KEY);

        HttpResponse<String> response = sendHttpRequest(openWeatherMapUrl);

        if (response != null) {
            System.out.println("OpenWeatherMap Response Status Code: " + response.statusCode());
            System.out.println("OpenWeatherMap Response Body: " + response.body());

            if (response.statusCode() == 200) {
                JSONObject jsonObject = new JSONObject(response.body());
                return !jsonObject.has("message"); // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –º–µ—Å—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            }
        }
        return false;
    }

    private String getWeatherInfo(String location) throws IOException, InterruptedException {
        if (!locationExists(location)) {
            return null;
        }

        String encodedLocation = URLEncoder.encode(location, StandardCharsets.UTF_8);
        String weatherUrl = String.format("http://api.openweathermap.org/data/2.5/weather?q=%s&appid=%s&units=metric&lang=ru",
                encodedLocation, WEATHER_API_KEY);
        HttpResponse<String> weatherResponse = sendHttpRequest(weatherUrl);

        if (weatherResponse != null && weatherResponse.statusCode() == 200) {
            JSONObject weatherJsonObject = new JSONObject(weatherResponse.body());
            double temperature = weatherJsonObject.getJSONObject("main").getDouble("temp");
            String weatherDescription = weatherJsonObject.getJSONArray("weather").getJSONObject(0).getString("description");

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
            LocalDateTime timeUtc = LocalDateTime.now(ZoneId.of("UTC"));

            LocalDateTime userTime = timeUtc.atZone(ZoneId.of("UTC")).withZoneSameInstant(USER_TIMEZONE).toLocalDateTime();
            String formattedTime = userTime.format(DateTimeFormatter.ofPattern("HH:mm"));

            String weatherInfo = String.format("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ %s (%s): %.1f¬∞C, %s",
                    location, formattedTime, temperature, weatherDescription);

            weatherInfo += "\n\n" + getClothingRecommendation(temperature, weatherDescription);

            return weatherInfo;
        }
        return null;
    }

    private HttpResponse<String> sendHttpRequest(String url) throws IOException, InterruptedException {
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .header("Accept", "application/json")
                .build();

        return client.send(request, HttpResponse.BodyHandlers.ofString());
    }

    private void sendStartMessage(Long chatId) {
        String text = "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç MeteoMag, –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –ø–æ–≥–æ–¥—É. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.";
        sendMessage(chatId, text);
    }

    private void sendWeatherMessage(long chatId, String weatherInfo) {
        sendMessage(chatId, weatherInfo);
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private String translateWeatherDescription(String englishDescription) {
        return weatherDescriptions.getOrDefault(englishDescription, englishDescription);
    }

    private String getClothingRecommendation(double temperature, String weatherDescription) {
        StringBuilder recommendation = new StringBuilder();

        if (temperature >= 25) {
            recommendation.append("–ñ–∞—Ä–∫–æ! ‚òÄÔ∏è –ù–∞–¥–µ–Ω—å—Ç–µ –ª–µ–≥–∫—É—é –æ–¥–µ–∂–¥—É: —à–æ—Ä—Ç—ã, —Ñ—É—Ç–±–æ–ª–∫—É –∏–ª–∏ –ø–ª–∞—Ç—å–µ.");
        } else if (temperature >= 15) {
            recommendation.append("–¢–µ–ø–ª–æ! üå§Ô∏è –ü–æ–¥–æ–π–¥—É—Ç –¥–∂–∏–Ω—Å—ã, —Ñ—É—Ç–±–æ–ª–∫–∞, –ª–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞.");
        } else if (temperature >= 5) {
            recommendation.append("–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ. üçÇ –ù–∞–¥–µ–Ω—å—Ç–µ —Å–≤–∏—Ç–µ—Ä, –∫—É—Ä—Ç–∫—É, –¥–∂–∏–Ω—Å—ã.");
        } else {
            recommendation.append("–•–æ–ª–æ–¥–Ω–æ! ‚ùÑÔ∏è –ù–∞–¥–µ–Ω—å—Ç–µ —Ç–µ–ø–ª—É—é –∫—É—Ä—Ç–∫—É, —à–∞–ø–∫—É, —à–∞—Ä—Ñ –∏ –ø–µ—Ä—á–∞—Ç–∫–∏.");
        }

        if (weatherDescription.contains("–¥–æ–∂–¥—å")) {
            recommendation.append("\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–æ–Ω—Ç! ‚òîÔ∏è");
        }

        return recommendation.toString();
    }

    public static void main(String[] args) {
        try {
            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            botsApi.registerBot(new MeteoMagBot());
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
